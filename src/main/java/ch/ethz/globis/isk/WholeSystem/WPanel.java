package ch.ethz.globis.isk.WholeSystem;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

import org.bson.Document;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.model.Filters;

import ch.ethz.globis.isk.Zoo.PanelErrorMessage;
import ch.ethz.globis.isk.domain.ConferenceEdition;
import ch.ethz.globis.isk.domain.Person;
import ch.ethz.globis.isk.domain.Publication;
import ch.ethz.globis.isk.domain.zoodb.ZooConference;
import ch.ethz.globis.isk.domain.zoodb.ZooConferenceEdition;
import ch.ethz.globis.isk.domain.zoodb.ZooInProceedings;
import ch.ethz.globis.isk.domain.zoodb.ZooPerson;
import ch.ethz.globis.isk.domain.zoodb.ZooProceedings;
import ch.ethz.globis.isk.domain.zoodb.ZooPublication;
import ch.ethz.globis.isk.domain.zoodb.ZooPublisher;
import ch.ethz.globis.isk.domain.zoodb.ZooSeries;
import ch.ethz.globis.isk.mongodb.Database;
import ch.ethz.globis.isk.mongodb.Table;
import ch.ethz.globis.isk.util.Pair;
import ch.ethz.globis.isk.xmldb.api.BaseXClient.Query;

/**
 *
 * @author panuyabalasuntharam
 */
public class WPanel extends javax.swing.JPanel {

	private ch.ethz.globis.isk.mongodb.Database db2;
	private ch.ethz.globis.isk.xmldb.Database db3;

	/**
	 * Creates new form Panel
	 */
	public WPanel(ch.ethz.globis.isk.mongodb.Database db2, ch.ethz.globis.isk.xmldb.Database db3) {
		this.db2 = db2;
		this.db3 = db3;

		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jPanel4 = new javax.swing.JPanel();
		jPanel5 = new javax.swing.JPanel();

		ztextField2 = new javax.swing.JTextField();
		ztextField1 = new javax.swing.JTextField();
		ztextField3 = new javax.swing.JTextField();

		mtextField1 = new javax.swing.JTextField();
		mtextField2 = new javax.swing.JTextField();
		mtextField3 = new javax.swing.JTextField();

		xtextField1 = new javax.swing.JTextField();
		xtextField3 = new javax.swing.JTextField();
		xtextField2 = new javax.swing.JTextField();

		jLabel7 = new javax.swing.JLabel();
		jLabel9 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		resultLabel = new javax.swing.JLabel();

		jSeparator15 = new javax.swing.JSeparator();
		jSeparator16 = new javax.swing.JSeparator();
		jSeparator17 = new javax.swing.JSeparator();
		jSeparator1 = new javax.swing.JSeparator();
		jSeparator9 = new javax.swing.JSeparator();
		jSeparator10 = new javax.swing.JSeparator();
		jSeparator12 = new javax.swing.JSeparator();
		jSeparator13 = new javax.swing.JSeparator();
		jSeparator11 = new javax.swing.JSeparator();
		jSeparator14 = new javax.swing.JSeparator();

		// ------------------------------------------------------------------------------------------------------------------//

		mPublicationButton = new javax.swing.JButton();
		mProButton = new javax.swing.JButton();
		mSerButton = new javax.swing.JButton();
		mInProButton = new javax.swing.JButton();
		mConfButton = new javax.swing.JButton();
		mConfEdButton = new javax.swing.JButton();
		mAuthEdButton = new javax.swing.JButton();
		mPublisherButton = new javax.swing.JButton();
		mQuery1Button = new javax.swing.JButton();
		mQuery2Button = new javax.swing.JButton();
		mQuery3Button = new javax.swing.JButton();
		mQuery4Button = new javax.swing.JButton();
		mQuery9Button = new javax.swing.JButton();
		mQuery10Button = new javax.swing.JButton();
		mQuery8Button = new javax.swing.JButton();
		mQuery11Button = new javax.swing.JButton();
		mQuery6Button = new javax.swing.JButton();
		mQuery7Button = new javax.swing.JButton();
		mQuery5Button = new javax.swing.JButton();
		mQuery13Button = new javax.swing.JButton();
		mQuery14Button = new javax.swing.JButton();
		mQuery12Button = new javax.swing.JButton();

		// ------------------------------------------------------------------------------------------------------------------//
		xPublicationButton = new javax.swing.JButton();
		xSerButton = new javax.swing.JButton();
		xProButton = new javax.swing.JButton();
		xInProButton = new javax.swing.JButton();
		xConfButton = new javax.swing.JButton();
		xConfEdButton = new javax.swing.JButton();
		xAuthEdButton = new javax.swing.JButton();
		xPublisherButton = new javax.swing.JButton();
		xQuery1Button = new javax.swing.JButton();
		xQuery2Button = new javax.swing.JButton();
		xQuery3Button = new javax.swing.JButton();
		xQuery4Button = new javax.swing.JButton();
		xQuery9Button = new javax.swing.JButton();
		xQuery10Button = new javax.swing.JButton();
		xQuery8Button = new javax.swing.JButton();
		xQuery11Button = new javax.swing.JButton();
		xQuery6Button = new javax.swing.JButton();
		xQuery7Button = new javax.swing.JButton();
		xQuery5Button = new javax.swing.JButton();
		xQuery13Button = new javax.swing.JButton();
		xQuery14Button = new javax.swing.JButton();
		xQuery12Button = new javax.swing.JButton();

		zQuery13Button = new javax.swing.JButton();
		zQuery5Button = new javax.swing.JButton();
		zQuery1Button = new javax.swing.JButton();
		zInProButton = new javax.swing.JButton();
		zSerButton = new javax.swing.JButton();
		zQuery2Button = new javax.swing.JButton();
		zQuery3Button = new javax.swing.JButton();
		zQuery11Button = new javax.swing.JButton();
		zConfButton = new javax.swing.JButton();
		zPublisherButton = new javax.swing.JButton();
		zQuery6Button = new javax.swing.JButton();
		zQuery8Button = new javax.swing.JButton();
		zQuery10Button = new javax.swing.JButton();
		zProButton = new javax.swing.JButton();
		zAuthEdButton = new javax.swing.JButton();
		zQuery12Button = new javax.swing.JButton();
		zQuery4Button = new javax.swing.JButton();
		zQuery7Button = new javax.swing.JButton();
		zConfEdButton = new javax.swing.JButton();
		zQuery14Button = new javax.swing.JButton();
		zPublicationButton = new javax.swing.JButton();
		zQuery9Button = new javax.swing.JButton();

		setBackground(new java.awt.Color(97, 212, 195));
		setForeground(new java.awt.Color(255, 255, 255));
		setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		zInProButton.setText("InProceddings");
		zInProButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zInProActionPerformed(evt);
			}
		});

		zPublisherButton.setText("Publishers");
		zPublisherButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zPublisherActionPerformed(evt);
			}
		});

		zPublicationButton.setText("Publications");
		zPublicationButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zPublishcationActionPerformed(evt);
			}
		});

		zConfEdButton.setText("Conf Editions");
		zConfEdButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zConfEdActionPerformed(evt);
			}
		});

		zConfButton.setText("Conferences");
		zConfButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zConfActionPerformed(evt);
			}
		});

		zAuthEdButton.setText("Authors/Editors");
		zAuthEdButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zAuthEdActionPerformed(evt);
			}
		});

		zSerButton.setText("Series");
		zSerButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zSerActionPerformed(evt);
			}
		});

		zProButton.setText("Proceedings");
		zProButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zProActionPerformed(evt);
			}
		});

		zQuery1Button.setText("1.Pub by ID");
		zQuery1Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery1ActionPerformed(evt);
			}
		});

		zQuery2Button.setText("2. Pub by title");
		zQuery2Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery2ActionPerformed(evt);
			}
		});

		zQuery3Button.setText("3. Q2 ord by title");
		zQuery3Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery3ActionPerformed(evt);
			}
		});

		zQuery4Button.setText("4. Co-Authors");
		zQuery4Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery4ActionPerformed(evt);
			}
		});

		zQuery5Button.setText("5. Short. P Authors");
		zQuery5Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery5ActionPerformed(evt);
			}
		});

		zQuery6Button.setText("6. Avg Pub");
		zQuery6Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery6ActionPerformed(evt);
			}
		});

		zQuery7Button.setText("7. PubCount y");
		zQuery7Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery7ActionPerformed(evt);
			}
		});

		zQuery8Button.setText("8. PubCount Conf");
		zQuery8Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery8ActionPerformed(evt);
			}
		});

		zQuery9Button.setText("9. Auth/Ed Count");
		zQuery9Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery9ActionPerformed(evt);
			}
		});

		zQuery10Button.setText("10. Auth of Conf");
		zQuery10Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery10ActionPerformed(evt);
			}
		});

		zQuery11Button.setText("11. Pub of Conf");
		zQuery11Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery11ActionPerformed(evt);
			}
		});

		zQuery12Button.setText("12. Auth = Ed");
		zQuery12Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery12ActionPerformed(evt);
			}
		});

		zQuery13Button.setText("13. Pub Auth last");
		zQuery13Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery13ActionPerformed(evt);
			}
		});

		zQuery14Button.setText("14. Pub of Pro");
		zQuery14Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				zQuery14ActionPerformed(evt);
			}
		});

		jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
		jLabel7.setForeground(new java.awt.Color(255, 255, 255));

		// ------------------------------------------------------------------------------------//

		xInProButton.setText("InProceddings");
		xInProButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xInProActionPerformed(evt);
			}
		});

		xPublisherButton.setText("Publishers");
		xPublisherButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xPublisherActionPerformed(evt);
			}
		});

		xProButton.setText("Proceedings");
		xProButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xProActionPerformed(evt);
			}
		});

		xSerButton.setText("Series");
		xSerButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xSerActionPerformed(evt);
			}
		});

		xAuthEdButton.setText("Authors/Editors");
		xAuthEdButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xAuthEdActionPerformed(evt);
			}
		});

		xConfEdButton.setText("Conf Editions");
		xConfEdButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xConfEdActionPerformed(evt);
			}
		});

		xPublicationButton.setText("Publications");
		xPublicationButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				xPublicationActionPerformed(evt);
			}
		});

		xConfButton.setText("Conferences");
		xConfButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xConfActionPerformed(evt);
			}
		});

		xQuery1Button.setText("1.Pub by ID");
		xQuery1Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery1ActionPerformed(evt);
			}
		});

		xQuery2Button.setText("2. Pub by title");
		xQuery2Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery2ActionPerformed(evt);
			}
		});

		xQuery3Button.setText("3. Q2 ord by title");
		xQuery3Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery3ActionPerformed(evt);
			}
		});

		xQuery4Button.setText("4. Co-Authors");
		xQuery4Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery4ActionPerformed(evt);
			}

		});

		xQuery5Button.setText("5. Short. P Authors");
		xQuery5Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery5ActionPerformed(evt);
			}
		});

		xQuery6Button.setText("6. Avg Pub");
		xQuery6Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery6ActionPerformed(evt);
			}
		});

		xQuery7Button.setText("7. PubCount y");
		xQuery7Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery7ActionPerformed(evt);
			}
		});

		xQuery8Button.setText("8. PubCount Conf");
		xQuery8Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery8ActionPerformed(evt);
			}
		});

		xQuery9Button.setText("9. Auth/Ed Count");
		xQuery9Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery9ActionPerformed(evt);
			}
		});

		xQuery10Button.setText("10. Auth of Conf");
		xQuery10Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery10ActionPerformed(evt);
			}
		});

		xQuery11Button.setText("11. Pub of Conf");
		xQuery11Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery11ActionPerformed(evt);
			}
		});

		xQuery12Button.setText("12. Auth = Ed");
		xQuery12Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery12ActionPerformed(evt);
			}
		});

		xQuery13Button.setText("13. Pub Auth last");
		xQuery13Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery13ActionPerformed(evt);
			}
		});

		xQuery14Button.setText("14. Pub of Pro");
		xQuery14Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xQuery14ActionPerformed(evt);
			}
		});

		add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 0, 330, 620));

		// ------------------------------------------------------------------------------------//

		mSerButton.setText("Series");
		mSerButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mSerActionPerformed(evt);
			}
		});
		add(mSerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 320, 150, -1));

		mPublicationButton.setText("Publications");
		add(mPublicationButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 230, 150, -1));
		mPublicationButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				mPublicationActionPerformed(evt);
			}
		});

		mProButton.setText("Proceedings");
		mProButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mProActionPerformed(evt);
			}
		});
		add(mProButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 230, 150, -1));

		mInProButton.setText("InProceddings");
		mInProButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mInProActionPerformed(evt);
			}
		});
		add(mInProButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 260, 150, -1));

		mConfButton.setText("Conferences");
		mConfButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mConfActionPerformed(evt);
			}
		});
		add(mConfButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 260, 150, -1));

		mConfEdButton.setText("Conf Editions");
		mConfEdButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mConfEdActionPerformed(evt);
			}
		});
		add(mConfEdButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 290, 150, -1));

		mAuthEdButton.setText("Authors/Editors");
		mAuthEdButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mAuthEdActionPerformed(evt);
			}
		});
		add(mAuthEdButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 290, 150, -1));

		mPublisherButton.setText("Publishers");
		mPublisherButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mPublisherActionPerformed(evt);
			}
		});
		add(mPublisherButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 320, 150, -1));

		mQuery1Button.setText("1.Pub by ID");
		mQuery1Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery1ActionPerformed(evt);
			}
		});
		add(mQuery1Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 350, 150, -1));

		mQuery2Button.setText("2. Pub by title");
		mQuery2Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery2ActionPerformed(evt);
			}
		});
		add(mQuery2Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 380, 150, -1));

		mQuery3Button.setText("3. Q2 ord by title");
		mQuery3Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery3ActionPerformed(evt);
			}
		});
		add(mQuery3Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 410, -1, -1));

		mQuery4Button.setText("4. Co-Authors");
		mQuery4Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery4ActionPerformed(evt);
			}
		});
		add(mQuery4Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 440, 150, -1));

		mQuery5Button.setText("5. Short. P Authors");
		mQuery5Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery5ActionPerformed(evt);
			}
		});
		add(mQuery5Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 470, 150, -1));

		mQuery6Button.setText("6. Avg Pub");
		mQuery6Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery6ActionPerformed(evt);
			}
		});
		add(mQuery6Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 500, 150, -1));

		mQuery7Button.setText("7. PubCount y");
		mQuery7Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery7ActionPerformed(evt);
			}
		});
		add(mQuery7Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 530, 150, -1));

		mQuery8Button.setText("8. PubCount Conf");
		mQuery8Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery8ActionPerformed(evt);
			}
		});
		add(mQuery8Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 350, 150, -1));

		mQuery9Button.setText("9. Auth/Ed Count");
		mQuery9Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery9ActionPerformed(evt);
			}
		});
		add(mQuery9Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 380, 150, -1));

		mQuery10Button.setText("10. Auth of Conf");
		mQuery10Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery10ActionPerformed(evt);
			}
		});
		add(mQuery10Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 410, 150, -1));

		mQuery11Button.setText("11. Pub of Conf");
		mQuery11Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery11ActionPerformed(evt);
			}
		});
		add(mQuery11Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 440, 150, -1));

		mQuery12Button.setText("12. Auth = Ed");
		mQuery12Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery12ActionPerformed(evt);
			}
		});
		add(mQuery12Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 470, 150, -1));

		mQuery13Button.setText("13. Pub Auth last");
		mQuery13Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery13ActionPerformed(evt);
			}
		});
		add(mQuery13Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 500, 150, -1));

		mQuery14Button.setText("14. Pub of Pro");
		mQuery14Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mQuery14ActionPerformed(evt);
			}
		});
		add(mQuery14Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 530, 150, -1));

		jSeparator15.setForeground(new java.awt.Color(255, 255, 255));
		jPanel1.setBackground(new java.awt.Color(36, 47, 65));
		jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
		add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 0, -1, 529));

		jPanel2.setBackground(new java.awt.Color(36, 47, 65));

		jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
		jLabel9.setForeground(new java.awt.Color(255, 255, 255));
		ztextField2.setBackground(new java.awt.Color(36, 47, 65));
		ztextField2.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
		ztextField2.setForeground(new java.awt.Color(255, 255, 255));
		ztextField2.setText("Enter  ");
		ztextField2.setBorder(null);
		ztextField2.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTextField18MouseClicked(evt);
			}
		});
		ztextField2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextField18ActionPerformed(evt);
			}
		});

		ztextField1.setBackground(new java.awt.Color(36, 47, 65));
		ztextField1.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
		ztextField1.setForeground(new java.awt.Color(255, 255, 255));
		ztextField1.setText("Enter  ");
		ztextField1.setBorder(null);
		ztextField1.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTextField14MouseClicked(evt);
			}
		});
		ztextField1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextField14ActionPerformed(evt);
			}
		});

		jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
		jLabel6.setForeground(new java.awt.Color(255, 255, 255));
		jLabel6.setText("ZooDB");

		ztextField3.setBackground(new java.awt.Color(36, 47, 65));
		ztextField3.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
		ztextField3.setForeground(new java.awt.Color(255, 255, 255));
		ztextField3.setText("Enter  ");
		ztextField3.setBorder(null);
		ztextField3.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTextField15MouseClicked(evt);
			}
		});
		ztextField3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextField15ActionPerformed(evt);
			}
		});

		jSeparator16.setForeground(new java.awt.Color(255, 255, 255));

		jSeparator14.setForeground(new java.awt.Color(255, 255, 255));

		jSeparator13.setForeground(new java.awt.Color(255, 255, 255));
		jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
		jLabel5.setForeground(new java.awt.Color(255, 255, 255));
		jLabel5.setText("XML");
		jPanel4.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 300, 47));

		jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
		jLabel4.setForeground(new java.awt.Color(255, 255, 255));

		jSeparator17.setForeground(new java.awt.Color(255, 255, 255));

		jSeparator12.setForeground(new java.awt.Color(255, 255, 255));

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup().addGap(17, 17, 17).addComponent(jLabel9)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				.addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(10, 10, 10)
								.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(ztextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 260,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 300,
												javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(10, 10, 10)
								.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jSeparator15, javax.swing.GroupLayout.PREFERRED_SIZE, 260,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(ztextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 260,
												javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(10, 10, 10)
								.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jSeparator16, javax.swing.GroupLayout.PREFERRED_SIZE, 260,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(ztextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 260,
												javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(10, 10, 10).addComponent(jSeparator17,
								javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(140, 140, 140).addComponent(zProButton,
								javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addComponent(zPublicationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(zInProButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(140, 140, 140).addComponent(zConfButton,
								javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(140, 140, 140).addComponent(
								zAuthEdButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE))
						.addComponent(zConfEdButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(zPublisherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(140, 140, 140).addComponent(zSerButton,
								javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addComponent(zQuery1Button, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(140, 140, 140).addComponent(
								zQuery8Button, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE))
						.addComponent(zQuery2Button, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(140, 140, 140).addComponent(
								zQuery9Button, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE))
						.addComponent(zQuery3Button)
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(140, 140, 140).addComponent(
								zQuery10Button, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(140, 140, 140).addComponent(
								zQuery11Button, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE))
						.addComponent(zQuery4Button, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(140, 140, 140).addComponent(
								zQuery12Button, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE))
						.addComponent(zQuery5Button, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(zQuery6Button, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(140, 140, 140).addComponent(
								zQuery13Button, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE))
						.addComponent(zQuery7Button, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(140, 140, 140).addComponent(
								zQuery14Button, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
								javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(jPanel2Layout.createSequentialGroup().addGap(10, 10, 10).addComponent(jLabel7,
								javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addGap(0, 0, Short.MAX_VALUE)));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup().addGap(18, 18, 18).addComponent(jLabel9)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel2Layout.createSequentialGroup().addGap(40, 40, 40).addComponent(
										ztextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 26,
										javax.swing.GroupLayout.PREFERRED_SIZE))
								.addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 47,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(4, 4, 4)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jSeparator15, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGroup(jPanel2Layout.createSequentialGroup().addGap(10, 10, 10).addComponent(
										ztextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 26,
										javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addGap(4, 4, 4)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jSeparator16, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGroup(jPanel2Layout.createSequentialGroup().addGap(10, 10, 10).addComponent(
										ztextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 30,
										javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addComponent(jSeparator17, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(8, 8, 8)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(zProButton).addComponent(zPublicationButton))
						.addGap(1, 1, 1)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(zInProButton).addComponent(zConfButton))
						.addGap(1, 1, 1)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(zAuthEdButton).addComponent(zConfEdButton))
						.addGap(1, 1, 1)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(zPublisherButton).addComponent(zSerButton))
						.addGap(1, 1, 1)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(zQuery1Button).addComponent(zQuery8Button))
						.addGap(1, 1, 1)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(zQuery2Button).addComponent(zQuery9Button))
						.addGap(1, 1, 1)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(zQuery3Button).addComponent(zQuery10Button))
						.addGap(1, 1, 1)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(zQuery11Button).addComponent(zQuery4Button))
						.addGap(1, 1, 1)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(zQuery12Button).addComponent(zQuery5Button))
						.addGap(1, 1, 1)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(zQuery6Button).addComponent(zQuery13Button))
						.addGap(1, 1, 1)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(zQuery7Button).addComponent(zQuery14Button))
						.addGap(1, 1, 1).addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 47,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(16, 16, 16)));

		add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 290, 620));

		resultLabel.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
		resultLabel.setForeground(new java.awt.Color(255, 255, 255));
		add(resultLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 560, 270, 47));
		add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1057, 243, 300, 0));

		jPanel4.setBackground(new java.awt.Color(36, 47, 65));
		jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
		jPanel5.setLayout(jPanel5Layout);
		jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 0, Short.MAX_VALUE));
		jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 40, Short.MAX_VALUE));

		xtextField1.setBackground(new java.awt.Color(36, 47, 65));
		xtextField1.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
		xtextField1.setForeground(new java.awt.Color(255, 255, 255));
		xtextField1.setText("Enter  ");
		xtextField1.setBorder(null);
		xtextField1.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTextField11MouseClicked(evt);
			}
		});
		xtextField1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextField11ActionPerformed(evt);
			}
		});
		jPanel4.add(xQuery5Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, 150, -1));
		jPanel4.add(jSeparator14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 260, -1));
		jPanel4.add(jSeparator13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 260, -1));
		jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 560, 270, 47));
		jPanel4.add(xQuery13Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 500, 150, -1));
		jPanel4.add(xQuery1Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 150, -1));
		jPanel4.add(xtextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 260, 26));
		jPanel4.add(xQuery9Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 380, 150, -1));
		jPanel4.add(jSeparator12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 260, -1));
		jPanel4.add(xInProButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 150, -1));
		jPanel4.add(xSerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 320, 150, -1));
		jPanel4.add(xQuery3Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, -1, -1));
		jPanel4.add(xQuery11Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 440, 150, -1));
		jPanel4.add(xConfButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, 150, -1));
		jPanel4.add(xPublisherButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 150, -1));
		jPanel4.add(xQuery6Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 500, 150, -1));
		jPanel4.add(xQuery8Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 350, 150, -1));
		jPanel4.add(xQuery10Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 410, 150, -1));
		jPanel4.add(xProButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 230, 150, -1));
		jPanel4.add(xtextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 260, 26));
		jPanel4.add(xQuery2Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 150, -1));
		jPanel4.add(xAuthEdButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, 150, -1));
		jPanel4.add(xQuery12Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 470, 150, -1));
		jPanel4.add(xQuery7Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 530, 150, -1));
		jPanel4.add(xQuery4Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, 150, -1));
		jPanel4.add(xConfEdButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 150, -1));
		jPanel4.add(xQuery14Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 530, 150, -1));
		jPanel4.add(xPublicationButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 150, -1));

		xtextField2.setBackground(new java.awt.Color(36, 47, 65));
		xtextField2.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
		xtextField2.setForeground(new java.awt.Color(255, 255, 255));
		xtextField2.setText("Enter  ");
		xtextField2.setBorder(null);
		xtextField2.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTextField12MouseClicked(evt);
			}
		});
		xtextField2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextField12ActionPerformed(evt);
			}
		});

		xtextField3.setBackground(new java.awt.Color(36, 47, 65));
		xtextField3.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
		xtextField3.setForeground(new java.awt.Color(255, 255, 255));
		xtextField3.setText("Enter  ");
		xtextField3.setBorder(null);
		xtextField3.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTextField13MouseClicked(evt);
			}
		});
		xtextField3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextField13ActionPerformed(evt);
			}
		});
		jPanel4.add(xtextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 260, 30));

		jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 30)); // NOI18N
		jLabel2.setForeground(new java.awt.Color(255, 255, 255));
		jLabel2.setText("Domain Objects");
		add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, 300, 47));

		mtextField1.setBackground(new java.awt.Color(97, 212, 195));
		mtextField1.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
		mtextField1.setForeground(new java.awt.Color(255, 255, 255));
		mtextField1.setText("Enter  ");
		mtextField1.setBorder(null);
		mtextField1.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTextField8MouseClicked(evt);
			}
		});
		mtextField1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextField8ActionPerformed(evt);
			}
		});
		add(mtextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 100, 260, 26));

		mtextField2.setBackground(new java.awt.Color(97, 212, 195));
		mtextField2.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
		mtextField2.setForeground(new java.awt.Color(255, 255, 255));
		mtextField2.setText("Enter  ");
		mtextField2.setBorder(null);
		mtextField2.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTextField9MouseClicked(evt);
			}
		});
		mtextField2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextField9ActionPerformed(evt);
			}
		});
		add(mtextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 140, 260, 26));

		jSeparator9.setForeground(new java.awt.Color(255, 255, 255));
		add(jSeparator9, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 130, 260, -1));

		jSeparator10.setForeground(new java.awt.Color(255, 255, 255));
		add(jSeparator10, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 170, 260, -1));

		mtextField3.setBackground(new java.awt.Color(97, 212, 195));
		mtextField3.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
		mtextField3.setForeground(new java.awt.Color(255, 255, 255));
		mtextField3.setText("Enter  ");
		mtextField3.setBorder(null);
		mtextField3.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTextField10MouseClicked(evt);
			}
		});
		mtextField3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextField10ActionPerformed(evt);
			}
		});
		add(mtextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 180, 260, 30));

		jSeparator11.setForeground(new java.awt.Color(255, 255, 255));
		add(jSeparator11, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 210, 260, -1));

		jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
		jLabel3.setForeground(new java.awt.Color(255, 255, 255));
		jLabel3.setText("MongoDB");
		add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, 300, 47));
	}// </editor-fold>

	private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextField8MouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextField9MouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextField10MouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void mPublicationActionPerformed(ActionEvent evt) {
		new ch.ethz.globis.isk.mongodb.Table(db2.publications, db2.publications.find().iterator(), "Publications",
				new String[] { "ID", "Title" }, new String[] { "_id", "title" }, true);
	}

	private void mProActionPerformed(ActionEvent evt) {
		new ch.ethz.globis.isk.mongodb.Table(db2.publications,
				db2.publications.find(Filters.exists("publications")).iterator(), "Proceedings",
				new String[] { "ID", "Title", "Year", "Publisher", "ISBN", "Editors", "Series", "Conference Edition",
						"Publications" },
				new String[] { "_id", "title", "year", "publisher", "isbn", "editors", "series", "conferenceEdition",
						"publications" },
				true);
	}

	private void mSerActionPerformed(java.awt.event.ActionEvent evt) {
		new ch.ethz.globis.isk.mongodb.Table(db2.series, db2.series.find().iterator(), "Series",
				new String[] { "ID", "Name", "Publications" }, new String[] { "_id", "name", "publications" }, true);
	}

	private void mInProActionPerformed(java.awt.event.ActionEvent evt) {
		new ch.ethz.globis.isk.mongodb.Table(db2.publications,
				db2.publications.find(Filters.exists("proceedings")).iterator(), "Inproceedings",
				new String[] { "ID", "Title", "Authors", "Proceedings" },
				new String[] { "_id", "title", "authors", "proceedings" }, true);
	}

	private void mConfActionPerformed(java.awt.event.ActionEvent evt) {
		new ch.ethz.globis.isk.mongodb.Table(db2.conferences, db2.conferences.find().iterator(), "Conferences",
				new String[] { "ID", "Name", "Conference Edition" }, new String[] { "_id", "name", "editions" }, true);
	}

	private void mConfEdActionPerformed(java.awt.event.ActionEvent evt) {
		new ch.ethz.globis.isk.mongodb.Table(db2.conferenceEditions, db2.conferenceEditions.find().iterator(),
				"Conference Editions", new String[] { "ID", "Conference", "Year", "Proceedings" },
				new String[] { "_id", "conference", "year", "proceedings" }, true);
	}

	private void mAuthEdActionPerformed(java.awt.event.ActionEvent evt) {
		new ch.ethz.globis.isk.mongodb.Table(db2.persons, db2.persons.find().iterator(), "Authors/Editors",
				new String[] { "ID", "Name", "Authored Publications", "Edited Publications" },
				new String[] { "_id", "name", "authoredPublications", "editedPublications" }, true);
	}

	private void mPublisherActionPerformed(java.awt.event.ActionEvent evt) {
		new ch.ethz.globis.isk.mongodb.Table(db2.publishers, db2.publishers.find().iterator(), "Publishers",
				new String[] { "ID", "Name", "Publications" }, new String[] { "_id", "name", "publications" }, true);
	}

	private void mQuery1ActionPerformed(java.awt.event.ActionEvent evt) {
		String id = mtextField1.getText();

		Iterator<Document> iterator = db2.publications.find(Filters.eq("_id", id)).iterator();
		new ch.ethz.globis.isk.mongodb.Table(db2.publications, iterator, "Publication by ID",
				new String[] { "ID", "Title" }, new String[] { "_id", "title" }, false);
	}

	private void mQuery2ActionPerformed(java.awt.event.ActionEvent evt) {
		String title = mtextField1.getText();
		int beginOffset;
		int endOffset;

		try {
			beginOffset = Integer.parseInt(mtextField2.getText());
			endOffset = Integer.parseInt(mtextField3.getText());
		} catch (Exception e) {
			resultLabel.setText(invalidInput);
			return;
		}

		Iterator<Document> iterator = db2.publications
				.aggregate(Arrays.asList(
						new Document("$match", new Document("title", new Document("$regex", ".*" + title + ".*i"))),
						new Document("$skip", beginOffset), new Document("$limit", endOffset - beginOffset)))
				.iterator();

		new ch.ethz.globis.isk.mongodb.Table(db2.publications, iterator,
				"Publications by title, begin-offset, end-offset", new String[] { "ID", "Title" },
				new String[] { "_id", "title" }, false);
	}

	private void mQuery3ActionPerformed(java.awt.event.ActionEvent evt) {
		String title = mtextField1.getText();
		int beginOffset;
		int endOffset;

		try {
			beginOffset = Integer.parseInt(mtextField2.getText());
			endOffset = Integer.parseInt(mtextField3.getText());
		} catch (Exception e) {
			resultLabel.setText(invalidInput);
			return;
		}

		Iterator<Document> iterator = db2.publications.aggregate(Arrays.asList(
				new Document("$match", new Document("title", new Document("$regex", ".*" + title + ".*i"))),
				new Document("$skip", beginOffset), new Document("$limit", endOffset - beginOffset),
				new Document("$sort", new Document("title", 1)))).iterator();

		new ch.ethz.globis.isk.mongodb.Table(db2.publications, iterator,
				"Publications by title, begin-offset, end-offset ordered by title", new String[] { "ID", "Title" },
				new String[] { "_id", "title" }, false);
	}

	private void mQuery4ActionPerformed(java.awt.event.ActionEvent evt) {
		// String name = "Kevin D. Ashley";
		String name = mtextField1.getText();

		Iterator<Document> iterator = db2.publications
				.aggregate(
						Arrays.asList(new Document("$match", new Document("authors", name)),
								new Document("$project",
										new Document("author", name).append("coAuthors", new Document("$filter",
												new Document("input", "$authors").append("as", "author").append("cond",
														new Document("$ne", Arrays.asList("$$author", name)))))),
								new Document("$unwind", "$coAuthors"),
								new Document("$group", new Document("_id", "$author").append("coAuthors",
										new Document("$addToSet", "$coAuthors")))))
				.iterator();

		new ch.ethz.globis.isk.mongodb.Table(db2.publications, iterator, "Co-Authors",
				new String[] { "Author", "Co-Authors" }, new String[] { "_id", "coAuthors" }, false);
	}

	private void mQuery5ActionPerformed(java.awt.event.ActionEvent evt) {
		String author1 = mtextField1.getText();
		String author2 = mtextField2.getText();

		Iterator<Document> iterator = db2.publications.aggregate(Arrays.asList(
				new Document("$match", new Document("$or",
						Arrays.asList(new Document("authors", author1), new Document("authors", author2)))),
				/*
				 * new Document("$lookup", new Document("from", "persons")
				 * .append("localField", "authors") .append("foreignField",
				 * "name") .append("as", "author") ),
				 */
				new Document("$unwind", "$authors"),

				new Document("$graphLookup",
						new Document("from", "$$ROOT").append("startWith", "$authors")
								.append("connectFromField", "authors").append("connectToField", "authors").append("as",
										"connectedAuthors"))))
				.iterator();

		new ch.ethz.globis.isk.mongodb.Table(db2.publications, iterator, "Co-Authors",
				new String[] { "Author", "connectedAuthors", "authors", "author" },
				new String[] { "_id", "connectedAuthors", "authors", "author" }, false);
	}

	private void mQuery6ActionPerformed(java.awt.event.ActionEvent evt) {
		AggregateIterable<Document> query = db2.publications
				.aggregate(
						Arrays.asList(
								new Document("$project",
										new Document("_id", 1).append("title", 1).append("authors", 1).append("total",
												new Document("$size",
														new Document("$ifNull",
																Arrays.asList("$authors", Arrays.asList()))))),
								new Document("$group", new Document("_id", "average").append("count",
										new Document("$avg", "$total")))));

		Document firstRes = query.first();

		if (firstRes.containsKey("count")) {
			this.resultLabel.setText(Double.toString(firstRes.getDouble("count")));
		}

		new ch.ethz.globis.isk.mongodb.Table(db2.publications, query.iterator(), "Global avg",
				new String[] { "ID", "Count" }, new String[] { "_id", "count" }, true);
	}

	private void mQuery7ActionPerformed(java.awt.event.ActionEvent evt) {
		// Number of publications per year
		String str1 = mtextField1.getText();
		String str2 = mtextField2.getText();

		int yearFrom;
		int yearTo;

		try {
			yearFrom = Integer.parseInt(str1);
			yearTo = Integer.parseInt(str2);
		} catch (Exception e) {
			resultLabel.setText(invalidInput);
			return;
		}

		if (yearFrom > yearTo) {
			int temp = yearTo;
			yearTo = yearFrom;
			yearFrom = temp;
		}

		/*
		 * String expr = "(this['year'] != undefined && this['year'] >= " +
		 * yearFrom + " && this['year'] <= " + yearTo + ")";
		 * 
		 * long result = db.publications.count(Filters.where(expr));
		 * resultLabel.setText(Long.toString(result));
		 * 
		 * new Table(db.publications,
		 * db.publications.find(Filters.where(expr)).iterator(),
		 * "Publications between " + yearFrom + " and " + yearTo, new String[]
		 * {"Title", "Year"}, new String[] {"title", "year"}, false);
		 */

		Iterator<Document> iterator = db2.publications.aggregate(Arrays.asList(
				new Document("$project",
						new Document("_id", "$_id").append("year", "$year")
								.append("gte", new Document("$gte", Arrays.asList("$year", yearFrom))).append("lte",
										new Document("$lte", Arrays.asList("$year", yearTo)))),
				new Document("$match",
						new Document("$and", Arrays.asList(new Document("gte", true), new Document("lte", true)))),
				new Document("$group",
						new Document("_id", "$_id").append("count", new Document("$sum", 1)).append("year",
								new Document("$first", "$year"))),
				new Document("$group", new Document("_id", "$year").append("count", new Document("$sum", "$count"))),
				new Document("$sort", new Document("_id", 1)))).iterator();

		new ch.ethz.globis.isk.mongodb.Table(db2.publications, iterator,
				"Publications between " + yearFrom + " and " + yearTo,
				new String[] { "Year", "Number of Publications" }, new String[] { "_id", "count" }, false);
	}

	private void mQuery8ActionPerformed(java.awt.event.ActionEvent evt) {
		String conferenceName = mtextField1.getText();

		Iterator<Document> iterator = db2.conferences
				.aggregate(Arrays.asList(new Document("$match", new Document("name", conferenceName)),
						new Document("$lookup",
								new Document("from", "conferenceEditions").append("localField", "editions")
										.append("foreignField", "_id").append("as", "editions")),
						new Document("$unwind", "$editions"),

						new Document("$lookup",
								new Document("from", "publications").append("localField", "editions.proceedings")
										.append("foreignField", "_id").append("as", "proceedings")),
						new Document("$unwind", "$proceedings"),

						new Document("$group",
								new Document("_id", null).append("name", new Document("$first", "$name")).append(
										"count", new Document("$sum",
												new Document("$size", "$proceedings.publications"))))))
				.iterator();

		new ch.ethz.globis.isk.mongodb.Table(db2.conferences, iterator,
				"Number of Publications of conference " + conferenceName,
				new String[] { "Name", "Number of publications" }, new String[] { "name", "count" }, false);
	}

	private void mQuery9ActionPerformed(java.awt.event.ActionEvent evt) {
		String conferenceName = mtextField1.getText();

		Iterator<Document> iterator = db2.conferences
				.aggregate(Arrays.asList(new Document("$match", new Document("name", conferenceName)),
						new Document("$lookup",
								new Document("from", "conferenceEditions").append("localField", "editions")
										.append("foreignField", "_id").append("as", "editions")),
						new Document("$unwind", "$editions"),

						new Document("$lookup",
								new Document("from", "publications").append("localField", "editions.proceedings")
										.append("foreignField", "_id").append("as", "proceedings")),
						new Document("$unwind", "$proceedings"),

						new Document("$lookup",
								new Document("from", "publications").append("localField", "proceedings.publications")
										.append("foreignField", "_id").append("as", "inProceedings")),
						new Document("$unwind", "$inProceedings"),

						new Document("$group",
								new Document("_id", null).append("name", new Document("$first", "$name"))
										.append("editors", new Document("$addToSet", "$proceedings.editors")).append(
												"authors", new Document("$addToSet", "$inProceedings.authors"))),

						new Document("$project", new Document("name", "$name").append("authors",
								new Document("$setUnion", Arrays.asList("$authors", "$editors")))),

						new Document("$group",
								new Document("_id", null).append("name", new Document("$first", "$name"))
										.append("count", new Document("$sum", new Document("$size", "$authors"))))))
				.iterator();

		new ch.ethz.globis.isk.mongodb.Table(db2.conferences, iterator,
				"Number of Authors/Editors of conference " + conferenceName,
				new String[] { "Name", "Number of authors/editors" }, new String[] { "name", "count" }, false);
	}

	private void mQuery10ActionPerformed(java.awt.event.ActionEvent evt) {
		String conferenceName = mtextField1.getText();

		Iterator<Document> iterator = db2.conferences
				.aggregate(Arrays.asList(new Document("$match", new Document("name", conferenceName)),
						new Document("$lookup",
								new Document("from", "conferenceEditions").append("localField", "editions")
										.append("foreignField", "_id").append("as", "editions")),
						new Document("$unwind", "$editions"),

						new Document("$lookup",
								new Document("from", "publications").append("localField", "editions.proceedings")
										.append("foreignField", "_id").append("as", "proceedings")),
						new Document("$unwind", "$proceedings"),

						new Document("$lookup",
								new Document("from", "publications").append("localField", "proceedings.publications")
										.append("foreignField", "_id").append("as", "inProceedings")),
						new Document("$unwind", "$inProceedings"),

						new Document("$group",
								new Document("_id", null).append("name", new Document("$first", "$name"))
										.append("authors", new Document("$addToSet", "$proceedings.editors")).append(
												"authors", new Document("$addToSet", "$inProceedings.authors"))),
						new Document("$unwind", "$authors"), new Document("$unwind", "$authors"),

						new Document("$group", new Document("_id", null).append("name", new Document("$first", "$name"))
								.append("authors", new Document("$addToSet", "$authors")))))
				.iterator();

		new ch.ethz.globis.isk.mongodb.Table(db2.conferences, iterator,
				"Authors/Editors of conference " + conferenceName, new String[] { "Name", "Authors/Editors" },
				new String[] { "name", "authors" }, false);
	}

	private void mQuery11ActionPerformed(java.awt.event.ActionEvent evt) {
		String conferenceName = mtextField1.getText();

		Iterator<Document> iterator = db2.conferences
				.aggregate(Arrays.asList(new Document("$match", new Document("name", conferenceName)),
						new Document("$lookup",
								new Document("from", "conferenceEditions").append("localField", "editions")
										.append("foreignField", "_id").append("as", "editions")),
						new Document("$unwind", "$editions"),

						new Document("$lookup",
								new Document("from", "publications").append("localField", "editions.proceedings")
										.append("foreignField", "_id").append("as", "proceedings")),
						new Document("$unwind", "$proceedings"),

						new Document("$lookup",
								new Document("from", "publications").append("localField", "proceedings.publications")
										.append("foreignField", "_id").append("as", "inProceedings")),
						new Document("$unwind", "$inProceedings"),

						new Document("$group",
								new Document("_id", null).append("name", new Document("$first", "$name"))
										.append("inProceedings", new Document("$addToSet", "$inProceedings._id"))
										.append("proceedings", new Document("$addToSet", "$proceedings._id"))),

						new Document("$project",
								new Document("name", "$name").append("publications",
										new Document("$setUnion", Arrays.asList("$inProceedings", "$proceedings"))))))
				.iterator();

		new ch.ethz.globis.isk.mongodb.Table(db2.conferences, iterator, "Publications of conference " + conferenceName,
				new String[] { "Name", "Publications" }, new String[] { "name", "publications" }, false);
	}

	private void mQuery12ActionPerformed(java.awt.event.ActionEvent evt) {

	}

	private void mQuery13ActionPerformed(java.awt.event.ActionEvent evt) {
		String name = mtextField1.getText();

		// Exact matching could be used alternatively
		// String expr = "this.authors != undefined &&
		// this.authors[this.authors.length - 1] === '" + name + "'";
		String expr = "this.authors != undefined && this.authors[this.authors.length - 1].includes('" + name + "')";

		Iterator<Document> iterator = db2.publications.find(Filters.where(expr)).iterator();

		new ch.ethz.globis.isk.mongodb.Table(db2.publications, iterator,
				"Publications containing " + name + " as last author",
				new String[] { "ID", "Title", "Authors", "Pages", "Year" },
				new String[] { "_id", "title", "authors", "pages", "year" }, true);
	}

	private void mQuery14ActionPerformed(java.awt.event.ActionEvent evt) {
		int yearFrom;
		int yearTo;

		try {
			yearFrom = Integer.parseInt(mtextField1.getText());
			yearTo = Integer.parseInt(mtextField2.getText());
		} catch (Exception e) {
			resultLabel.setText(invalidInput);
			return;
		}

		Iterator<Document> iterator = db2.publications.aggregate(Arrays.asList(
				new Document("$project",
						new Document("_id", "$_id").append("publisher", "$publisher").append("authors", "$authors")
								.append("editors", "$editors").append("year", "$year")
								.append("gte", new Document("$gte", Arrays.asList("$year", yearFrom)))
								.append("lte", new Document("$lte", Arrays.asList("$year", yearTo)))),
				new Document("$match",
						new Document("$and", Arrays.asList(new Document("gte", true), new Document("lte", true)))),

				new Document("$lookup", new Document("from", "$$ROOT").append("localField", "authors")
						.append("foreignField", "editors").append("as", "proceedings")),

				new Document("$group", new Document("_id", "$publisher")))).iterator();

		new ch.ethz.globis.isk.mongodb.Table(db2.publishers, iterator,
				"Publishers of proceedings whose authors appear in inproceedings in range of years " + yearFrom + " to "
						+ yearTo,
				new String[] { "Publisher" }, new String[] { "_id" }, false);
	}

	private void jTextField11MouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextField11ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextField12MouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextField12ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextField13MouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextField13ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	// -----------------------------------------------------------------------------------------//

	private void xSerActionPerformed(java.awt.event.ActionEvent evt) {
		new ch.ethz.globis.isk.xmldb.Table(db3, "series.xml", null, "Series", new String[] { "Name", "Publications" },
				new String[] { "id", "pid" }, true);
	}

	private void xProActionPerformed(java.awt.event.ActionEvent evt) {
		new ch.ethz.globis.isk.xmldb.Table(db3, "proceedings.xml", null, "Proceedings",
				new String[] { "ID", "Title", "Conference", "Conference Edition", "Publisher", "Series", "ISBN",
						"Editors" },
				new String[] { "id", "title", "cid", "ceid", "publisher", "sid", "isbn", "editor" }, true);
	}

	private void xInProActionPerformed(java.awt.event.ActionEvent evt) {
		new ch.ethz.globis.isk.xmldb.Table(db3, "inproceedings.xml", null, "Inproceedings",
				new String[] { "ID", "Title", "Proceedings", "Authors" },
				new String[] { "id", "title", "pid", "author" }, true);
	}

	private void xConfActionPerformed(java.awt.event.ActionEvent evt) {
		new ch.ethz.globis.isk.xmldb.Table(db3, "conferences.xml", null, "Conferences",
				new String[] { "Name", "Editions" }, new String[] { "id", "ceid" }, true);
	}

	private void xConfEdActionPerformed(java.awt.event.ActionEvent evt) {
		new ch.ethz.globis.isk.xmldb.Table(db3, "conferenceEditions.xml", null, "ConferenceEditions",
				new String[] { "Year", "Conference", "Proceedings" }, new String[] { "id", "cid", "pid" }, true);
	}

	private void xAuthEdActionPerformed(java.awt.event.ActionEvent evt) {
		new ch.ethz.globis.isk.xmldb.Table(db3, "persons.xml", null, "Authors/Editors",
				new String[] { "Name", "Authored Publications", "Edited Publications" },
				new String[] { "id", "iid", "pid" }, true);
	}

	private void xPublisherActionPerformed(java.awt.event.ActionEvent evt) {
		new ch.ethz.globis.isk.xmldb.Table(db3, "publishers.xml", null, "Publishers",
				new String[] { "Name", "Publications" }, new String[] { "id", "pid" }, true);
	}

	private void xQuery1ActionPerformed(java.awt.event.ActionEvent evt) {
		String id = xtextField1.getText();
		String input = "let $publications := doc('publications.xml')/root//* " + "return <root>{ "
				+ "for $p in $publications " + "return " + "if (contains($p/id, '" + id + "')) " + "then $p "
				+ "else () " + "}</root> ";
		Query query = db3.execute(input);

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query, "Publications by id", new String[] { "ID", "Title" },
				new String[] { "id", "title" }, false);
	}

	private void xQuery2ActionPerformed(java.awt.event.ActionEvent evt) {
		String id = xtextField1.getText();
		int beginOffset = 0;
		int endOffset = 0;
		try {
			beginOffset = Integer.parseInt(xtextField2.getText());
			endOffset = Integer.parseInt(xtextField3.getText());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String input = "let $publications := doc('publications.xml')/root//*[contains(title, '" + id + "')] "
				+ "return <root>{ " + "subsequence($publications, " + beginOffset + ", " + (endOffset - beginOffset)
				+ ") " + "}</root> ";
		Query query = db3.execute(input);

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query, "Publications by id limited",
				new String[] { "ID", "Title" }, new String[] { "id", "title" }, false);
	}

	private void xQuery3ActionPerformed(java.awt.event.ActionEvent evt) {
		String id = xtextField1.getText();
		int beginOffset = 0;
		int endOffset = 0;
		try {
			beginOffset = Integer.parseInt(xtextField2.getText());
			endOffset = Integer.parseInt(xtextField3.getText());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String input = "let $publications := doc('publications.xml')/root//*[contains(title, '" + id + "')] "
				+ "return <root>{ " + "let $sorted := for $publication in $publications "
				+ "order by $publication/title/text() " + "return $publication " + "return subsequence($sorted, "
				+ beginOffset + ", " + (endOffset - beginOffset) + ") " + "}</root> ";
		Query query = db3.execute(input);

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query, "Publications by id sorted limited",
				new String[] { "ID", "Title" }, new String[] { "id", "title" }, false);
	}

	private void xQuery4ActionPerformed(java.awt.event.ActionEvent evt) {
		String authorId = xtextField1.getText();
		String input = "let $author := doc('persons.xml')/root//*[id = '" + authorId + "'] " + "return <root>{ "
				+ "<author>{ " + "$author/id, "
				+ "for $i in doc('inproceedings.xml')/root//*[id = $author//iid/text()] " + "return "
				+ "for $coAuthor in $i//author " + "return " + "if ($coAuthor/text() = $author/id/text()) " + "then () "
				+ "else <coAuthor>{$coAuthor/text()}</coAuthor> " + "}</author> " + "}</root> ";
		Query query = db3.execute(input);

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query, "Co-Authors", new String[] { "Author", "Co-Authors" },
				new String[] { "id", "coAuthor" }, false);
	}

	private void xQuery5ActionPerformed(java.awt.event.ActionEvent evt) {
		String author1Id = xtextField1.getText();
		String author2Id = xtextField2.getText();
		String input = "declare function local:shortestPath($authors, $target, $depth) { " + "if ($depth > 20) "
				+ "then 'The authors do not have anything in common' " + "else "
				+ "if (some $author in $authors satisfies $author/id/text() = $target/id/text()) " + "then $depth "
				+ "else local:shortestPath(doc('coAuthors.xml')/root//*[id/text() = $authors//coAuthor/text()], $target, $depth + 1) "
				+ "}; " + "let $coAuthors := doc('coAuthors.xml')/root//*, " + "$author := $coAuthors[id = '"
				+ author1Id + "'], " + "$target := $coAuthors[id = '" + author2Id + "'] " + "return <root>{ "
				+ "<item>{ " + "<shortestPath>{ " + "local:shortestPath($author, $target, 0) " + "}</shortestPath> "
				+ "}</item> " + "}</root> ";
		Query query = db3.execute(input);

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query, "Shortest Path", new String[] { "Shortest Path" },
				new String[] { "shortestPath" }, false);
	}

	private void xQuery6ActionPerformed(java.awt.event.ActionEvent evt) {
		Query query = db3.executeFile("query6.xq");

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query, "Global average number of authors per publication",
				new String[] { "Avg number of authors" }, new String[] { "avg" }, false);
	}

	private void xQuery7ActionPerformed(java.awt.event.ActionEvent evt) {
		int beginYear = 0;
		int endYear = 0;
		try {
			beginYear = Integer.parseInt(xtextField1.getText());
			endYear = Integer.parseInt(xtextField2.getText());
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (beginYear > endYear) {
			int temp = beginYear;
			beginYear = endYear;
			endYear = temp;
		}

		String beginStr = Integer.toString(beginYear);
		String endStr = Integer.toString(endYear);

		String input = "let $inproceedings := doc('publications.xml')/root/inproceedings[(ceid >= " + beginYear
				+ ") and (ceid <= " + endYear + ")] " + "return <root>{ "
				+ "for $year in distinct-values($inproceedings/ceid) " + "order by $year " + "return " + "<result> "
				+ "<year>{ " + "$year " + "}</year> " + "<num>{ " + "count($inproceedings[ceid = $year]) " + "}</num> "
				+ "</result> " + "}</root>";

		Query query = db3.execute(input);

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query,
				"Number of publications per year between " + beginStr + " and " + endStr + ".",
				new String[] { "Year", "Number" }, new String[] { "year", "num" }, false);
	}

	private void xQuery8ActionPerformed(java.awt.event.ActionEvent evt) {
		// e.g. "ICPP"
		String confID = xtextField1.getText();

		String input = "let $publications := doc('publications.xml')/root " + "return <root>{ " + "<item>{ " + "<num>{ "
				+ "for $p in $publications/proceedings[cid = '" + confID + "'] " + "return ( " + "count( "
				+ "for $ip in  $publications/inproceedings " + "where $ip/pid = $p/id " + "return $ip " + ") " + ") "
				+ "}</num> " + "}</item> " + "}</root>";

		Query query = db3.execute(input);

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query, "Number of publications for conference " + confID + ". ",
				new String[] { "Total" }, new String[] { "num" }, false);
	}

	private void xQuery9ActionPerformed(java.awt.event.ActionEvent evt) {
		String confID = xtextField1.getText();

		String input = "let $proceedings := doc('proceedings.xml')/root//*[cid/text() = '" + confID + "'], "
				+ "$inproceedings := doc('inproceedings.xml')/root//*[pid/text() = $proceedings/id/text()] "
				+ "return <root><item><count>{count(distinct-values($proceedings/editor/text() | $inproceedings/author/text()))}</count></item></root> ";

		Query query = db3.execute(input);

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query,
				"Count of authors and editors of conference " + confID + ".", new String[] { "Count" },
				new String[] { "count" }, false);
	}

	private void xQuery10ActionPerformed(java.awt.event.ActionEvent evt) {
		// e.g. "CONPAR"
		String confID = xtextField1.getText();

		/*
		 * String input = "let $publications := doc('publications.xml')/root " +
		 * "return <root>{ " + "for $p in $publications/proceedings " +
		 * "where $p/cid = '" + confID +"' " + "return( " +
		 * "for $e in $p/editor " +
		 * "return <name><author>{$e/text()}</author></name> " + ") " + "} " +
		 * "{ " + "for $p in $publications/proceedings " + "where $p/cid = '" +
		 * confID +"' " + "return ( " +
		 * "for $ip in $publications/inproceedings " + "where $ip/pid = $p/id "
		 * + "return " + "for $a in $ip/author " + "return <name>{$a}</name> " +
		 * ") " + "}</root>";
		 */

		String input = "let $proceedings := doc('proceedings.xml')/root//*[cid/text() = '" + confID + "'], "
				+ "$inproceedings := doc('inproceedings.xml')/root//*[pid/text() = $proceedings/id/text()] " + "return "
				+ "<root>{ "
				+ "for $author in distinct-values($proceedings/editor/text() | $inproceedings/author/text()) "
				+ "return " + "<author>{ " + "<id>{$author}</id> " + "}</author> " + "}</root> ";

		Query query = db3.execute(input);

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query,
				"Names of authors and editors of conference " + confID + ".", new String[] { "Name" },
				new String[] { "id" }, false);
	}

	private void xQuery11ActionPerformed(java.awt.event.ActionEvent evt) {
		String confID = xtextField1.getText();

		String input = "let $proceedings := doc('proceedings.xml')/root//*[cid/text() = '" + confID + "'], "
				+ "$inproceedings := doc('inproceedings.xml')/root//*[pid/text() = $proceedings/id/text()] "
				+ "return <root>{$inproceedings}</root> ";

		Query query = db3.execute(input);

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query, "Inproceedings of conference " + confID + ".",
				new String[] { "ID", "Title", "Proceedings", "Authors" },
				new String[] { "id", "title", "pid", "author" }, false);
	}

	private void xQuery12ActionPerformed(java.awt.event.ActionEvent evt) {
		Query query = db3.executeFile("query12.xq");

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query,
				"Persons that are author in InProceedings and editor in appropriate Proceedings",
				new String[] { "Name" }, new String[] { "id" }, false);
	}

	private void xQuery13ActionPerformed(java.awt.event.ActionEvent evt) {
		String authorID = xtextField1.getText();

		String input = "let $inproceedings :=doc('inproceedings.xml')/root/* " + "return <root>{ "
				+ "for $ip in $inproceedings " + "where some $author in $ip/author[last()] satisfies $author/text() = '"
				+ authorID + "' " + "return $ip " + "}</root> ";

		Query query = db3.execute(input);

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query,
				"Publications where author " + authorID + " appears as last author.",
				new String[] { "ID", "Title", "Proceedings", "Authors" },
				new String[] { "id", "title", "pid", "author" }, false);
	}

	private void xQuery14ActionPerformed(java.awt.event.ActionEvent evt) {
		int beginYear = 0;
		int endYear = 0;
		try {
			beginYear = Integer.parseInt(xtextField1.getText());
			endYear = Integer.parseInt(xtextField2.getText());
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (beginYear > endYear) {
			int temp = beginYear;
			beginYear = endYear;
			endYear = temp;
		}

		String input = "let $proceedings := doc('proceedings.xml')/root/*[1982 <= ceid and ceid <= 1986], "
				+ "$inproceedings := doc('inproceedings.xml')/root/*, " + "$publishers := " + "for $p in $proceedings "
				+ "where every $e in $p/editor satisfies $e/id/text() = $inproceedings/author/id/text() "
				+ "return $p/publisher " + "return <root>{ " + "for $publisher in distinct-values($publishers) "
				+ "return <publisher><id>{$publisher}</id></publisher> " + "}</root> ";

		Query query = db3.execute(input);

		new ch.ethz.globis.isk.xmldb.Table(db3, null, query,
				"Publishers of Proceedings whose authors appear in any InProceedings in range of years",
				new String[] { "Publisher" }, new String[] { "id" }, false);
	}
	
	
	
	
	

	private void zInProActionPerformed(java.awt.event.ActionEvent evt) {
		Pair<Object[][], String[]> objectsAndTitle = null;
		ch.ethz.globis.isk.Zoo.Database db = new ch.ethz.globis.isk.Zoo.Database("database", false);
		try {
			db.open();
			Collection<ZooInProceedings> collection = db.getWithFilter(ZooInProceedings.class, "");
			objectsAndTitle = getObjectsAndTitle(collection, filter);
			DefaultTableModel model = new DefaultTableModel(objectsAndTitle.a, objectsAndTitle.b);
			openNewTable(model);
		} catch (Exception e) {
    		System.out.println(e.getMessage());
    		final String error = e.getMessage();
    		SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                	JFrame frame = new JFrame(error);
                	PanelErrorMessage panel = new PanelErrorMessage();
                	frame.add(panel);
                	frame.pack();
                	frame.setVisible(true);
                }
            });
		} finally {
			db.close();
		}
	}

	private void zSerActionPerformed(java.awt.event.ActionEvent evt) {
		Pair<Object[][], String[]> objectsAndTitle = null;
		ch.ethz.globis.isk.Zoo.Database db = new ch.ethz.globis.isk.Zoo.Database("database", false);
		try {
			db.open();
			Collection<ZooSeries> collection = db.getWithFilter(ZooSeries.class, "");
			objectsAndTitle = getObjectsAndTitle(collection, filter);
			DefaultTableModel model = new DefaultTableModel(objectsAndTitle.a, objectsAndTitle.b);
			openNewTable(model);
		} catch (Exception e) {
    		System.out.println(e.getMessage());
    		final String error = e.getMessage();
    		SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                	JFrame frame = new JFrame(error);
                	PanelErrorMessage panel = new PanelErrorMessage();
                	frame.add(panel);
                	frame.pack();
                	frame.setVisible(true);
                }
            });
		} finally {
			db.close();
		}
	}

	private void zConfActionPerformed(java.awt.event.ActionEvent evt) {
		Pair<Object[][], String[]> objectsAndTitle = null;
		ch.ethz.globis.isk.Zoo.Database db = new ch.ethz.globis.isk.Zoo.Database("database", false);
		try {
			db.open();
			Collection<ZooConference> collection = db.getWithFilter(ZooConference.class, "");
			objectsAndTitle = getObjectsAndTitle(collection, filter);
			DefaultTableModel model = new DefaultTableModel(objectsAndTitle.a, objectsAndTitle.b);
			openNewTable(model);
		} catch (Exception e) {
    		System.out.println(e.getMessage());
    		final String error = e.getMessage();
    		SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                	JFrame frame = new JFrame(error);
                	PanelErrorMessage panel = new PanelErrorMessage();
                	frame.add(panel);
                	frame.pack();
                	frame.setVisible(true);
                }
            });
		} finally {
			db.close();
		}
	}

	private void zPublisherActionPerformed(java.awt.event.ActionEvent evt) {
		Pair<Object[][], String[]> objectsAndTitle = null;
		ch.ethz.globis.isk.Zoo.Database db = new ch.ethz.globis.isk.Zoo.Database("database", false);
		try {
			db.open();
			Collection<ZooPublication> collection = db.getWithFilter(ZooPublication.class, "");
			objectsAndTitle = getObjectsAndTitle(collection, filter);
			DefaultTableModel model = new DefaultTableModel(objectsAndTitle.a, objectsAndTitle.b);
			openNewTable(model);
		} catch (Exception e) {
    		System.out.println(e.getMessage());
    		final String error = e.getMessage();
    		SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                	JFrame frame = new JFrame(error);
                	PanelErrorMessage panel = new PanelErrorMessage();
                	frame.add(panel);
                	frame.pack();
                	frame.setVisible(true);
                }
            });
		} finally {
			db.close();
		}
	}
	
	private void zPublishcationActionPerformed(java.awt.event.ActionEvent evt) {
		Pair<Object[][], String[]> objectsAndTitle = null;
		ch.ethz.globis.isk.Zoo.Database db = new ch.ethz.globis.isk.Zoo.Database("database", false);
		try {
			db.open();
			Collection<ZooPublisher> collection = db.getWithFilter(ZooPublisher.class, "");
			objectsAndTitle = getObjectsAndTitle(collection, filter);
			DefaultTableModel model = new DefaultTableModel(objectsAndTitle.a, objectsAndTitle.b);
			openNewTable(model);
		} catch (Exception e) {
    		System.out.println(e.getMessage());
    		final String error = e.getMessage();
    		SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                	JFrame frame = new JFrame(error);
                	PanelErrorMessage panel = new PanelErrorMessage();
                	frame.add(panel);
                	frame.pack();
                	frame.setVisible(true);
                }
            });
		} finally {
			db.close();
		}
	}

	private void zProActionPerformed(java.awt.event.ActionEvent evt) {
    	Pair<Object[][], String[]> objectsAndTitle = null;
		ch.ethz.globis.isk.Zoo.Database db = new ch.ethz.globis.isk.Zoo.Database("database", false);
		try {
			db.open();
			Collection<ZooProceedings> collection = db.getWithFilter(ZooProceedings.class, "");
			objectsAndTitle = getObjectsAndTitle(collection, filter);
			DefaultTableModel model = new DefaultTableModel(objectsAndTitle.a, objectsAndTitle.b);
			openNewTable(model);
		} catch (Exception e) {
    		System.out.println(e.getMessage());
    		final String error = e.getMessage();
    		SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                	JFrame frame = new JFrame(error);
                	PanelErrorMessage panel = new PanelErrorMessage();
                	frame.add(panel);
                	frame.pack();
                	frame.setVisible(true);
                }
            });
		} finally {
			db.close();
		}
	}

	private void zAuthEdActionPerformed(java.awt.event.ActionEvent evt) {
		Pair<Object[][], String[]> objectsAndTitle = null;
		ch.ethz.globis.isk.Zoo.Database db = new ch.ethz.globis.isk.Zoo.Database("database", false);
		try {
			db.open();
			Collection<ZooPerson> collection = db.getWithFilter(ZooPerson.class, "");
			objectsAndTitle = getObjectsAndTitle(collection, filter);
			DefaultTableModel model = new DefaultTableModel(objectsAndTitle.a, objectsAndTitle.b);
			openNewTable(model);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			final String error = e.getMessage();
			SwingUtilities.invokeLater(new Runnable() {
				@Override
				public void run() {
					JFrame frame = new JFrame(error);
					PanelErrorMessage panel = new PanelErrorMessage();
					frame.add(panel);
					frame.pack();
					frame.setVisible(true);
				}
			});
		} finally {
			db.close();
		}
	}

	private void zConfEdActionPerformed(java.awt.event.ActionEvent evt) {
		Pair<Object[][], String[]> objectsAndTitle = null;
		ch.ethz.globis.isk.Zoo.Database db = new ch.ethz.globis.isk.Zoo.Database("database", false);
		try {
			db.open();
			Collection<ZooConferenceEdition> collection = db.getWithFilter(ZooConferenceEdition.class, "");
			objectsAndTitle = getObjectsAndTitle(collection, filter);
			DefaultTableModel model = new DefaultTableModel(objectsAndTitle.a, objectsAndTitle.b);
			openNewTable(model);
		} catch (Exception e) {
    		System.out.println(e.getMessage());
    		final String error = e.getMessage();
    		SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                	JFrame frame = new JFrame(error);
                	PanelErrorMessage panel = new PanelErrorMessage();
                	frame.add(panel);
                	frame.pack();
                	frame.setVisible(true);
                }
            });
		} finally {
			db.close();
		}
	}

	private void zQuery1ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void zQuery2ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void zQuery3ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void zQuery4ActionPerformed(java.awt.event.ActionEvent evt) {
		Pair<Object[][], String[]> objectsAndTitle = null;
		ch.ethz.globis.isk.Zoo.Database db = new ch.ethz.globis.isk.Zoo.Database("database", false);
		try {
			db.open();
			Collection<ZooPerson> collection = db.getCoAuthors(ztextField1.getText());
			
			objectsAndTitle = getObjectsAndTitle(collection, filter);
			DefaultTableModel model = new DefaultTableModel(objectsAndTitle.a, objectsAndTitle.b);
			openNewTable(model);
		} catch (Exception e) {
    		System.out.println(e.getMessage());
    		final String error = e.getMessage();
    		SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                	JFrame frame = new JFrame(error);
                	PanelErrorMessage panel = new PanelErrorMessage();
                	frame.add(panel);
                	frame.pack();
                	frame.setVisible(true);
                }
            });
		} finally {
			db.close();
		}
	}

	private void zQuery5ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void zQuery6ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void zQuery7ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void zQuery8ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void zQuery9ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void zQuery10ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void zQuery11ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void zQuery12ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void zQuery13ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void zQuery14ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextField14MouseClicked(java.awt.event.MouseEvent evt) {
		ztextField1.setText("");
	}

	private void jTextField14ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextField15MouseClicked(java.awt.event.MouseEvent evt) {
		ztextField3.setText("");
	}

	private void jTextField15ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextField18MouseClicked(java.awt.event.MouseEvent evt) {
		ztextField2.setText("");
	}

	private void jTextField18ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	/////////////////////////////////// XML///////////////////////////////////////////////////////

	private void xPublicationActionPerformed(ActionEvent evt) {
		new ch.ethz.globis.isk.xmldb.Table(db3, "publications.xml", null, "Publications",
				new String[] { "ID", "Title" }, new String[] { "id", "title" }, true);
	}

	private Pair<Object[][], String[]> getObjectsAndTitle(Collection<?> collection, String filter) {
		if (collection.isEmpty())
			return null;

		Object[][] objects = new Object[collection.size()][];
		int i = 0;
		for (Object object : collection) {
			if (object instanceof ZooPublication) {
				ZooPublication publication = (ZooPublication) object;
				String authors = "";
				for (Person author : publication.getAuthors()) {
					authors += author.getName() + ", ";
				}
				if (authors.length() > 2)
					authors = authors.substring(0, authors.length() - 2);

				if ((publication.getTitle() != null && publication.getTitle().contains(filter))
						|| (Integer.toString(publication.getYear()).contains(filter)) || (authors.contains(filter)))
					objects[i++] = new Object[] { publication.getTitle(), publication.getYear(), authors };
			} else if (object instanceof ZooConference) {
				ZooConference conference = (ZooConference) object;
				String editions = "";
				for (ConferenceEdition edition : conference.getEditions()) {
					editions += edition.getYear() + ", ";
				}
				if (editions.length() > 2)
					editions = editions.substring(0, editions.length() - 2);

				if ((conference.getName() != null && conference.getName().contains(filter))
						|| (editions.contains(filter)))
					objects[i++] = new Object[] { conference.getName(), editions };
			} else if (object instanceof ZooConferenceEdition) {
				ZooConferenceEdition conferenceEdition = (ZooConferenceEdition) object;
				if ((conferenceEdition.getConference() != null && conferenceEdition.getConference().getName() != null
						&& conferenceEdition.getConference().getName().contains(filter))
						|| (Integer.toString(conferenceEdition.getYear()).contains(filter)))
					objects[i++] = new Object[] { conferenceEdition.getConference().getName(),
							conferenceEdition.getYear() };
			} else if (object instanceof ZooPerson) {
				ZooPerson person = (ZooPerson) object;
				String publications = "";
				for (Publication publication : person.getAuthoredPublications()) {
					publications += publication.getTitle() + ", ";
				}
				for (Publication publication : person.getEditedPublications()) {
					publications += publication.getTitle() + ", ";
				}
				if (publications.length() > 2)
					publications = publications.substring(0, publications.length() - 2);

				if ((person.getName() != null && person.getName().contains(filter)) || (publications.contains(filter)))
					objects[i++] = new Object[] { person.getName(), publications };
			} else if (object instanceof ZooPublisher) {
				ZooPublisher publisher = (ZooPublisher) object;
				String publications = "";
				for (Publication publication : publisher.getPublications()) {
					publications += publication.getTitle() + ", ";
				}
				if (publications.length() > 2)
					publications = publications.substring(0, publications.length() - 2);

				if ((publisher.getName() != null && publisher.getName().contains(filter))
						|| (publications.contains(filter)))
					objects[i++] = new Object[] { publisher.getName(), publications };
			} else if (object instanceof ZooSeries) {
				ZooSeries series = (ZooSeries) object;
				String publications = "";
				for (Publication publication : series.getPublications()) {
					publications += publication.getTitle() + ", ";
				}
				if (publications.length() > 2)
					publications = publications.substring(0, publications.length() - 2);

				if ((series.getName() != null && series.getName().contains(filter)) || (publications.contains(filter)))
					objects[i++] = new Object[] { series.getName(), publications };
			}
		}

		String[] title = null;
		if (collection.iterator().next() instanceof ZooPublication)
			title = new String[] { "Title", "Year", "Authors" };
		else if (collection.iterator().next() instanceof ZooConference)
			title = new String[] { "Name", "Editions" };
		else if (collection.iterator().next() instanceof ZooConferenceEdition)
			title = new String[] { "Conference", "Edition" };
		else if (collection.iterator().next() instanceof ZooPerson)
			title = new String[] { "Name", "Publications" };
		else if (collection.iterator().next() instanceof ZooPublisher)
			title = new String[] { "Name", "Publications" };
		else if (collection.iterator().next() instanceof ZooSeries)
			title = new String[] { "Name", "Publications" };

		return new Pair<Object[][], String[]>(objects, title);
	}

	private void openNewTable(DefaultTableModel model) {
		////////////// Table/////////
		JFrame frame = new JFrame("Result");
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

		JPanel panel = new JPanel();

		panel.setBackground(new java.awt.Color(97, 212, 195));
		panel.setForeground(new java.awt.Color(255, 255, 255));
		panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		JTable table = new JTable();
		table.setModel(model);
		table.setFont(new java.awt.Font("Century Gothic", 0, 12));
		table.setGridColor(new java.awt.Color(97, 212, 195));
		// table.setBackground(new java.awt.Color(97, 212, 195));
		table.getTableHeader().setOpaque(false);
		table.getTableHeader().setBackground(new java.awt.Color(97, 212, 195));
		table.getTableHeader().setForeground(new java.awt.Color(255, 255, 255));
		table.getTableHeader().setBorder(null);
		table.getTableHeader().setFont(new java.awt.Font("Century Gothic", 0, 12));

		Container container = getRootPane();

		container.setLayout(new BorderLayout());
		container.setBackground(new java.awt.Color(97, 212, 195));
		container.add(table.getTableHeader(), BorderLayout.PAGE_START);
		container.add(table, BorderLayout.CENTER);
		frame.add(new JScrollPane(table));
		frame.pack();
		// frame.add(panel);
		frame.setVisible(true);
	}

	private String invalidInput = "Invalid Input";
	private String filter = "";

	private javax.swing.JButton mSerButton;
	private javax.swing.JButton mInProButton;
	private javax.swing.JButton mConfButton;
	private javax.swing.JButton mConfEdButton;
	private javax.swing.JButton mAuthEdButton;
	private javax.swing.JButton mQuery1Button;
	private javax.swing.JButton mPublisherButton;
	private javax.swing.JButton mQuery2Button;
	private javax.swing.JButton mQuery3Button;
	private javax.swing.JButton mQuery4Button;
	private javax.swing.JButton mQuery9Button;
	private javax.swing.JButton mQuery10Button;
	private javax.swing.JButton mQuery8Button;
	private javax.swing.JButton mQuery11Button;
	private javax.swing.JButton mQuery6Button;
	private javax.swing.JButton mQuery7Button;
	private javax.swing.JButton mQuery5Button;
	private javax.swing.JButton mPublicationButton;
	private javax.swing.JButton xSerButton;
	private javax.swing.JButton mQuery13Button;
	private javax.swing.JButton mQuery14Button;
	private javax.swing.JButton mQuery12Button;
	private javax.swing.JButton xPublicationButton;
	private javax.swing.JButton xProButton;
	private javax.swing.JButton xInProButton;
	private javax.swing.JButton xConfButton;
	private javax.swing.JButton xConfEdButton;
	private javax.swing.JButton xAuthEdButton;
	private javax.swing.JButton mProButton;
	private javax.swing.JButton xPublisherButton;
	private javax.swing.JButton xQuery1Button;
	private javax.swing.JButton xQuery2Button;
	private javax.swing.JButton xQuery3Button;
	private javax.swing.JButton xQuery4Button;
	private javax.swing.JButton xQuery9Button;
	private javax.swing.JButton xQuery10Button;
	private javax.swing.JButton xQuery8Button;
	private javax.swing.JButton xQuery11Button;
	private javax.swing.JButton xQuery6Button;
	private javax.swing.JButton xQuery7Button;
	private javax.swing.JButton xQuery5Button;
	private javax.swing.JButton xQuery13Button;
	private javax.swing.JButton xQuery14Button;
	private javax.swing.JButton xQuery12Button;
	private javax.swing.JButton zQuery13Button;
	private javax.swing.JButton zQuery5Button;
	private javax.swing.JButton zQuery1Button;
	private javax.swing.JButton zInProButton;
	private javax.swing.JButton zSerButton;
	private javax.swing.JButton zQuery2Button;
	private javax.swing.JButton zQuery3Button;
	private javax.swing.JButton zQuery11Button;
	private javax.swing.JButton zConfButton;
	private javax.swing.JButton zPublisherButton;
	private javax.swing.JButton zQuery6Button;
	private javax.swing.JButton zQuery8Button;
	private javax.swing.JButton zQuery10Button;
	private javax.swing.JButton zProButton;
	private javax.swing.JButton zAuthEdButton;
	private javax.swing.JButton zQuery12Button;
	private javax.swing.JButton zQuery4Button;
	private javax.swing.JButton zQuery7Button;
	private javax.swing.JButton zConfEdButton;
	private javax.swing.JButton zQuery14Button;
	private javax.swing.JButton zPublicationButton;
	private javax.swing.JButton zQuery9Button;

	private javax.swing.JLabel resultLabel;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;

	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JSeparator jSeparator10;
	private javax.swing.JSeparator jSeparator11;
	private javax.swing.JSeparator jSeparator12;
	private javax.swing.JSeparator jSeparator13;
	private javax.swing.JSeparator jSeparator14;
	private javax.swing.JSeparator jSeparator15;
	private javax.swing.JSeparator jSeparator16;
	private javax.swing.JSeparator jSeparator17;
	private javax.swing.JSeparator jSeparator9;
	private javax.swing.JTextField mtextField3;
	private javax.swing.JTextField xtextField1;
	private javax.swing.JTextField xtextField2;
	private javax.swing.JTextField xtextField3;
	private javax.swing.JTextField ztextField1;
	private javax.swing.JTextField ztextField3;
	private javax.swing.JTextField ztextField2;
	private javax.swing.JTextField mtextField1;
	private javax.swing.JTextField mtextField2;
	// End of variables declaration

}